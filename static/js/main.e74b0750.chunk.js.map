{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Row","props","react_default","a","createElement","className","children","Ele","_ref","_ref$width","width","_ref$bg","bg","onClick","style","concat","CalEle","App_Ele","TotalEle","_ref2","ops","App","_useState","useState","_useState2","Object","slicedToArray","numA","setNumA","_useState3","_useState4","isFloat","setIsFloat","_useState5","_useState6","operation","setOperation","_useState7","_useState8","numB","setNumB","handleOperation","opeType","setNum","target","handle","clickNum","num","_setNum","toString","split","includes","parseFloat","Math","sign","App_Row","App_TotalEle","App_CalEle","_setNum2","_setNum3","map","ele","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e74b0750.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst Row = props => {\n  const style = 'h-25 flex justify-center';\n  return <div className={style}>{props.children}</div>;\n};\n\nconst Ele = ({ children, width = '25', bg = 'bg-washed-green', onClick }) => {\n  const style = `w-${width} ${bg} pa3 tc helvetica black-70 b--solid b--white-90 pointer `;\n\n  return (\n    <div className={style} onClick={onClick}>\n      <h1 className=\"f1\">{children}</h1>\n    </div>\n  );\n};\n\nconst CalEle = props => (\n  <Ele bg={'bg-yellow'} onClick={props.onClick}>\n    {props.children}\n  </Ele>\n);\n\nconst TotalEle = ({ children, onClick }) => {\n  const style = `w-100 pr3 bg-lightest-blue tr helvetica black-70 b--solid b--white-90`;\n  return (\n    <div className={style} onClick={onClick}>\n      <h1 className='f1-l f1-m'>{children}</h1>\n    </div>\n  );\n}\n\n\nconst ops = {\n  add: 'ADD',\n  minus: 'MINUS',\n  multi: 'MULTIPLY',\n  divide: 'DIVIDE'\n};\n\nconst App = () => {\n  const [numA, setNumA] = useState(0);\n  const [isFloat, setIsFloat] = useState(false);\n  const [operation, setOperation] = useState(null); //operation: add, minus, multiply, divide\n  const [numB, setNumB] = useState(null);\n\n  const handleEqual = () => {\n    if (!operation || !numB) return;\n\n    if (operation === ops.add) {\n      setNumA(parseFloat(numA) + parseFloat(numB));\n    }\n\n    if (operation === ops.minus) {\n      setNumA(numA - numB);\n    }\n\n    if (operation === ops.multi) {\n      setNumA(numA * numB);\n    }\n\n    if (operation === ops.divide) {\n      setNumA(numA / numB);\n    }\n\n    setNumB(null);\n    setOperation(null);\n  };\n\n  const handleOperation = opeType => {\n    if (numA === 0 && !numB) {\n      return;\n    }\n\n    setOperation(opeType);\n  };\n\n  const setNum = () => {\n    return !operation && !numB\n      ? { target: numA, handle: setNumA }\n      : { target: numB, handle: setNumB };\n  };\n\n  const clickNum = num => {\n    const { target, handle } = setNum();\n\n\n    if (target === 0 || !target) {\n      handle(num);\n    } else {\n      if (isFloat) {\n        const hasDot = target\n          .toString()\n          .split('')\n          .includes('.');\n        hasDot\n          ? handle(parseFloat(`${target}${num}`))\n          : handle(parseFloat(`${target}.${num}`));\n      } else {\n        Math.sign(target) < 0\n          ? handle(target * 10 - num)\n          : handle(target * 10 + num);\n      }\n    }\n  };\n\n  const clearNum = num => {\n    setNumA(0);\n    setNumB(null);\n    setOperation(null);\n    setIsFloat(false);\n  };\n\n  const switchNegativePositive = () => {\n    const { target, handle } = setNum();\n    handle(-target);\n  };\n\n  const makeNumPercent = () => {\n    const { target, handle } = setNum();\n    handle(target * 0.01);\n  };\n\n  const setFloat = () => {\n    if (isFloat) {\n      return;\n    }\n\n    setIsFloat(!isFloat);\n  };\n\n  return (\n    <div className=\"flex flex-column vh-100\">\n      <Row>\n        <TotalEle>{numB ? numB : numA}</TotalEle>\n      </Row>\n      <Row>\n        <CalEle onClick={clearNum}>AC</CalEle>\n        <CalEle onClick={switchNegativePositive}>+/-</CalEle>\n        <CalEle onClick={makeNumPercent}>%</CalEle>\n        <CalEle onClick={() => handleOperation(ops.divide)}>รท</CalEle>\n      </Row>\n      <Row>\n        {[7, 8, 9].map(ele => (\n          <Ele key={ele} onClick={() => clickNum(ele)}>\n            {ele}\n          </Ele>\n        ))}\n        <CalEle onClick={() => handleOperation(ops.multi)}>X</CalEle>\n      </Row>\n      <Row>\n        {[4, 5, 6].map(ele => (\n          <Ele key={ele} onClick={() => clickNum(ele)}>\n            {ele}\n          </Ele>\n        ))}\n        <CalEle onClick={() => handleOperation(ops.minus)}>-</CalEle>\n      </Row>\n      <Row>\n        {[1, 2, 3].map(ele => (\n          <Ele key={ele} onClick={() => clickNum(ele)}>\n            {ele}\n          </Ele>\n        ))}\n        <CalEle onClick={() => handleOperation(ops.add)}>+</CalEle>\n      </Row>\n      <Row>\n        <Ele width={50} onClick={() => clickNum(0)}>\n          0\n        </Ele>\n        <Ele onClick={() => setFloat()}>.</Ele>\n        <CalEle onClick={() => handleEqual()}>=</CalEle>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}